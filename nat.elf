nat: type.
z: nat.
s: nat -> nat.

0 = z.
1 = s 0.
2 = s 1.
3 = s 2.
4 = s 3.
5 = s 4.
6 = s 5.
7 = s 6.
8 = s 7.
9 = s 8.
10 = s 9.

<: nat -> nat -> type. %infix none 1 <.
less/0: X < s X.
less/1: X < s Y
    <- X < Y.

sum: nat -> nat -> nat -> type.
sum/0: sum z X X.
sum/1: sum (s X) Y (s Z)
    <- sum X Y Z.

% The operation is invalid if Y > X
sub: nat -> nat -> nat -> type.
sub/0: sub X X 0.
sub/1: sub X Y Z
    <- Y < X
    <- sum Z Y X.

mult: nat -> nat -> nat -> type.
mult/0: mult 0 X 0.
mult/1: mult 1 X X.
mult/2: mult (s X) Y Z
    <- 1 < s X
    <- mult X Y A
    <- sum A Y Z.

% The operation is valid only if Z is a natural number
div: nat -> nat -> nat -> type.
div/0: div 0 X 0
    <- 0 < X.
div/1: div X Y Z
    <- sub X Y A
    <- div A Y B
    <- sum 1 B Z.

power: nat -> nat -> nat -> type.
power/0: power X 0 1.
power/1: power X (s Y) Z
    <- power X Y A
    <- mult A X Z.

fact: nat -> nat -> type.
fact/0: fact 0 1.
fact/1: fact (s X) Y
    <- fact X Z
    <- mult Z (s X) Y.

expr: type.
num: nat -> expr.

+: expr -> expr -> expr. %infix left 4 +.
-: expr -> expr -> expr. %infix left 4 -.
*: expr -> expr -> expr. %infix left 3 *.
/: expr -> expr -> expr. %infix left 3 /.
^: expr -> expr -> expr. %infix left 2 ^.
!: expr -> expr. %prefix 1 !.

eval: expr -> nat -> type.
eval/nat: eval (num X) X.
eval/sum: eval (X + Y) Z
    <- eval X X1
    <- eval Y Y1
    <- sum X1 Y1 Z.
eval/sub: eval (X - Y) Z
    <- eval X X1
    <- eval Y Y1
    <- sub X1 Y1 Z.
eval/mult: eval (X * Y) Z
    <- eval X X1
    <- eval Y Y1
    <- mult X1 Y1 Z.
eval/div: eval (X / Y) Z
    <- eval X X1
    <- eval Y Y1
    <- div X1 Y1 Z.
eval/power: eval (X ^ Y) Z
    <- eval X X1
    <- eval Y Y1
    <- power X1 Y1 Z.
eval/fact: eval (! X) Y
    <- eval X X1
    <- fact X1 Y.
