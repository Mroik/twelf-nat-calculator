nat: type.
z: nat.
s: nat -> nat.

0 = z.
1 = s 0.
2 = s 1.
3 = s 2.
4 = s 3.
5 = s 4.
6 = s 5.
7 = s 6.
8 = s 7.
9 = s 8.
10 = s 9.

<: nat -> nat -> type. %infix none 1 <.
less/0: X < s X.
less/1: X < s Y
    <- X < Y.

sum: nat -> nat -> nat -> type.
sum/0: sum z X X.
sum/1: sum (s X) Y (s Z)
    <- sum X Y Z.

sub: nat -> nat -> nat -> type.
sub/0: sub X Y Z
    <- Y < X
    <- sum Z Y X.

mult: nat -> nat -> nat -> type.
mult/0: mult z X z.
mult/1: mult (s z) X X.
mult/2: mult (s X) Y Z
    <- s z < s X
    <- mult X Y A
    <- sum A Y Z.

expr: type.
num: nat -> expr.

+: expr -> expr -> expr. %infix left 2 +.
-: expr -> expr -> expr. %infix left 2 -.
*: expr -> expr -> expr. %infix left 1 *.

eval: expr -> nat -> type.
eval/nat: eval (num X) X.
eval/sum: eval (X + Y) Z
    <- eval X X1
    <- eval Y Y1
    <- sum X1 Y1 Z.
eval/sub: eval (X - Y) Z
    <- eval X X1
    <- eval Y Y1
    <- sub X1 Y1 Z.
eval/mult: eval (X * Y) Z
    <- eval X X1
    <- eval Y Y1
    <- mult X1 Y1 Z.
